{"version":3,"sources":["components/Alert.js","components/HowTo.js","components/Spinner.js","components/Tooltip.js","Form.js","styles/GlobalStyle.js","components/Logos.js","components/Intro.js","App.js","index.js"],"names":["Container","styled","div","Alert","props","text","SwiperCore","use","Navigation","Pagination","STEPS","id","Title","h1","HowTo","slidesPerView","setWrapperSize","navigation","pagination","clickable","map","step","index","src","alt","width","height","Spinner","defaultOptions","loop","autoplay","animationData","require","rendererSettings","preserveAspectRatio","options","QuestionMark","Tooltip","data-tip","icon","faQuestionCircle","place","type","effect","ENVIRONMENTS","label","value","FormWrapper","LinkButton","button","color","DownloadButton","AdvancedOptions","InfoBox","Text","p","size","Form","queryParams","URLSearchParams","window","location","search","useState","clientId","clientSecret","environment","apiType","get","otherUrl","tokenGrantType","callbackUrl","formData","setFormData","DEFAULT_ERROR_TEXT","loading","setLoading","hasAdvancedSettings","setHasAdvancedSettings","hasDownloadStarted","setHasDownloadStarted","hasError","setHasError","errorText","setErrorText","PUBLIQ_STOPLIGHT_SCHEME","UDB_ENTRY_SCHEME_URL","UITPAS_API_SCHEME_URL","handleSubmit","a","startsWith","scheme","auth","convert","postmanCollectionJson","apiName","info","name","document","createElement","file","Blob","JSON","stringify","href","URL","createObjectURL","download","click","onDownloadCompleted","console","log","resetError","onClick","className","placeholder","onChange","e","target","style","position","disabled","htmlFor","rel","GlobalStyle","createGlobalStyle","Logos","Paragraph","Intro","App","hideIntro","setHideIntro","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.9af5a028.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Container = styled.div`\n  padding: 15px;\n  background-color: #f2dede;\n  border: 1px solid #ebccd1;\n  color: #a94442;\n  margin-bottom: 2rem;\n  width: 500px;\n`;\n\nconst Alert = (props) => {\n  return <Container>{props.text}</Container>;\n};\n\nexport { Alert };\n","// Core modules imports are same as usual\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/swiper-bundle.min.css';\nimport 'swiper/swiper.min.css';\n\nimport SwiperCore, { Navigation, Pagination } from 'swiper';\nimport styled from 'styled-components';\nSwiperCore.use([Navigation, Pagination]);\n\nconst STEPS = [\n  {\n    id: 1,\n    text: 'Start by clicking the \"Import\" button in Postman.',\n  },\n  {\n    id: 2,\n    text: 'Drag and drop or select the JSON file you downloaded. Postman should show an overview of the included API. Click \"Import\" to continue.',\n  },\n  {\n    id: 3,\n    text: 'After the collection has been imported, click on the button with three dots next to its name. Next, click the \"Edit\" button in the drop-down menu that appears.',\n  },\n  {\n    id: 4,\n    text: 'Make sure the \"Auth\" tab of the collection is active. Scroll all the way to the bottom of the \"Auth\" tab, and click \"Get New Access Token\".',\n  },\n  {\n    id: 5,\n    text: 'Wait for the success modal to close or click the \"Proceed\" button.',\n  },\n  {\n    id: 6,\n    text: 'A modal to manage your tokens should appear, with a detail view of the new token. Click \"Use Token\". You are now ready to start making requests! If your token expires, follow the steps to get new access token again.',\n  },\n];\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin-bottom: 1.5rem;\n`;\n\nconst Title = styled.h1`\n  font-size: 3rem;\n  margin-bottom: 0;\n  text-align: center;\n`;\n\nconst HowTo = (props) => {\n  return (\n    <Container>\n      <Title>Installation guide</Title>\n      <Swiper\n        slidesPerView={1}\n        setWrapperSize={800}\n        navigation\n        pagination={{ clickable: true }}\n      >\n        {STEPS.map((step, index) => (\n          <SwiperSlide key={`step_${index}`}>\n            <img\n              src={`/postman-step-${step.id}.png`}\n              alt={`postman download step ${step.id}`}\n              width={700}\n              height={339}\n            />\n            <p>\n              {`${step.id}.`} {step.text}\n            </p>\n          </SwiperSlide>\n        ))}\n      </Swiper>\n    </Container>\n  );\n};\n\nexport { HowTo };\n","import Lottie from 'react-lottie';\n\nconst Spinner = (props) => {\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: require('../animations/spinner.json'),\n    rendererSettings: {\n      preserveAspectRatio: 'xMidYMid slice',\n    },\n  };\n\n  return <Lottie options={defaultOptions} height={50} width={50} />;\n};\n\nexport { Spinner };\n","import ReactTooltip from 'react-tooltip';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport styled from 'styled-components';\n\nconst QuestionMark = styled.div`\n  display: inline-block;\n  color: darkgrey;\n  position: absolute;\n  right: -25px;\n  top: 5px;\n`;\n\nconst Tooltip = (props) => {\n  const { text } = props;\n  return (\n    <QuestionMark>\n      <span data-tip={text}>\n        <FontAwesomeIcon icon={faQuestionCircle} />\n      </span>\n      <ReactTooltip place=\"bottom\" type=\"dark\" effect=\"solid\" />\n    </QuestionMark>\n  );\n};\n\nexport { Tooltip };\n","import convert from '@publiqbe/openapi2postman';\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Alert } from './components/Alert';\nimport { HowTo } from './components/HowTo';\nimport { Spinner } from './components/Spinner';\nimport { Tooltip } from './components/Tooltip';\n\nconst ENVIRONMENTS = [\n  {\n    label: 'Acceptance',\n    value: 'acc',\n  },\n  {\n    label: 'Testing',\n    value: 'test',\n  },\n  {\n    label: 'Production',\n    value: 'prod',\n  },\n];\n\nconst FormWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 300px;\n`;\n\nconst LinkButton = styled.button`\n  border: 0;\n  height: auto;\n  text-decoration: underline;\n  text-transform: none;\n  font-size: 1.5rem;\n  padding: 0;\n  letter-spacing: 0;\n  color: ${(props) => props.color || 'darkgrey'};\n`;\n\nconst DownloadButton = styled.button`\n  height: 50px;\n`;\n\nconst AdvancedOptions = styled.div``;\n\nconst InfoBox = styled.div`\n  background-color: #efefef;\n  padding: 15px;\n  border-radius: 5px;\n`;\n\nconst Text = styled.p`\n  font-size: ${(props) => (props.size === 'small' ? '1.20rem' : '1.5rem')};\n  margin-bottom: 0;\n`;\n\nconst Form = (props) => {\n  const queryParams = new URLSearchParams(window.location.search);\n\n  const [formData, setFormData] = useState({\n    clientId: '',\n    clientSecret: '',\n    environment: 'test',\n    apiType: queryParams.get('api') ?? '',\n    otherUrl: '',\n    tokenGrantType: 'client_credentials',\n    callbackUrl: '',\n  });\n\n  const DEFAULT_ERROR_TEXT = 'Something went wrong, please try again later';\n\n  const [loading, setLoading] = useState(false);\n  const [hasAdvancedSettings, setHasAdvancedSettings] = useState(false);\n  const [hasDownloadStarted, setHasDownloadStarted] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorText, setErrorText] = useState(DEFAULT_ERROR_TEXT);\n\n  const PUBLIQ_STOPLIGHT_SCHEME =\n    'https://stoplight.io/api/v1/projects/publiq/';\n  const UDB_ENTRY_SCHEME_URL = `${PUBLIQ_STOPLIGHT_SCHEME}uitdatabank/nodes/reference/entry.json?deref=optimizedBundle`;\n  const UITPAS_API_SCHEME_URL = `${PUBLIQ_STOPLIGHT_SCHEME}uitpas/nodes/reference/UiTPAS.v2.json?deref=optimizedBundle`;\n\n  const handleSubmit = async () => {\n    if (\n      formData.apiType === 'other' &&\n      !formData.otherUrl.startsWith(PUBLIQ_STOPLIGHT_SCHEME)\n    ) {\n      setHasError(true);\n      setErrorText(`API URL should start with ${PUBLIQ_STOPLIGHT_SCHEME}`);\n      return;\n    }\n\n    if (formData.apiType === '') {\n      setHasError(true);\n      setErrorText(`Please select an API from the list`);\n      return;\n    }\n\n    let scheme;\n    switch (formData.apiType) {\n      case 'udb-entry':\n        scheme = UDB_ENTRY_SCHEME_URL;\n        break;\n      case 'uitpas-api':\n        scheme = UITPAS_API_SCHEME_URL;\n        break;\n      case 'other':\n        scheme = formData.otherUrl;\n        break;\n      default:\n        scheme = UDB_ENTRY_SCHEME_URL;\n    }\n    const environment = formData.environment || 'test';\n    const baseUrl = '';\n    const auth = {\n      tokenGrantType: formData.tokenGrantType || 'client_credentials',\n      clientId: formData.clientId,\n      clientSecret: formData.clientSecret,\n      ...(formData.callbackUrl !== '' && { callbackUrl: formData.callbackUrl }),\n    };\n    try {\n      setLoading(true);\n      const postmanCollectionJson = await convert(\n        scheme,\n        environment,\n        baseUrl,\n        auth,\n      );\n      const apiName = postmanCollectionJson.info.name || 'postman-collection';\n      const a = document.createElement('a');\n      const file = new Blob([JSON.stringify(postmanCollectionJson)], {\n        type: 'text/plain',\n      });\n      a.href = URL.createObjectURL(file);\n      a.download = apiName + '.json';\n      a.click();\n      setHasDownloadStarted(true);\n      props.onDownloadCompleted(true);\n    } catch (err) {\n      console.log(err);\n      setHasError(true);\n      setErrorText(DEFAULT_ERROR_TEXT);\n    }\n    setLoading(false);\n  };\n\n  const resetError = () => {\n    setHasError(false);\n    setErrorText('');\n  };\n\n  const restartFlow = () => {\n    setHasDownloadStarted(false);\n    props.onDownloadCompleted(false);\n  };\n\n  const toggleAdvancedOptions = () => {\n    setHasAdvancedSettings(!hasAdvancedSettings);\n  };\n\n  return (\n    <>\n      {hasError && <Alert text={errorText} />}\n      {loading ? (\n        <Spinner />\n      ) : (\n        <>\n          {hasDownloadStarted ? (\n            <>\n              <HowTo />\n              <LinkButton onClick={restartFlow} color=\"#00aae5\">\n                Download another collection\n              </LinkButton>\n            </>\n          ) : (\n            <FormWrapper key=\"form-wrapper\">\n              <div>\n                <input\n                  className=\"u-full-width\"\n                  type=\"text\"\n                  placeholder={`client id (${formData.environment} environment)`}\n                  value={formData.clientId}\n                  onChange={(e) => {\n                    setFormData({ ...formData, clientId: e.target.value });\n                    resetError();\n                  }}\n                />\n              </div>\n              <div style={{ position: 'relative' }}>\n                <input\n                  type=\"password\"\n                  className=\"u-full-width\"\n                  placeholder=\"client secret\"\n                  value={formData.clientSecret}\n                  onChange={(e) => {\n                    setFormData({ ...formData, clientSecret: e.target.value });\n                    resetError();\n                  }}\n                />\n                <Tooltip\n                  text={\n                    'Your client secret never leaves your browser. You can also leave this empty and enter it in Postman itself as the \"oauth2ClientSecret\" variable.'\n                  }\n                />\n              </div>\n              <div>\n                <select\n                  className=\"u-full-width\"\n                  value={formData.apiType}\n                  onChange={(e) => {\n                    setFormData({ ...formData, apiType: e.target.value });\n                    resetError();\n                  }}\n                  id=\"apiType\"\n                >\n                  <option value=\"\" disabled>\n                    Select API\n                  </option>\n                  <option value=\"udb-entry\">UiTdatabank Entry API</option>\n                  <option value=\"uitpas-api\">UiTPAS API</option>\n                  <option value=\"other\">Other...</option>\n                </select>\n              </div>\n              {formData.apiType === 'other' && (\n                <div>\n                  <input\n                    className=\"u-full-width\"\n                    type=\"text\"\n                    placeholder=\"url\"\n                    value={formData.otherUrl}\n                    onChange={(e) => {\n                      setFormData({ ...formData, otherUrl: e.target.value });\n                      resetError();\n                    }}\n                  />\n                </div>\n              )}\n              {hasAdvancedSettings && (\n                <AdvancedOptions>\n                  <label htmlFor=\"environment\">Environment</label>\n                  <select\n                    className=\"u-full-width\"\n                    value={formData.environment}\n                    onChange={(e) => {\n                      setFormData({ ...formData, environment: e.target.value });\n                      resetError();\n                    }}\n                    id=\"environment\"\n                  >\n                    {ENVIRONMENTS.map((environment) => (\n                      <option value={environment.value}>\n                        {environment.label}\n                      </option>\n                    ))}\n                  </select>\n                  <label htmlFor=\"tokenGrantType\">Token type </label>\n                  <select\n                    className=\"u-full-width\"\n                    value={formData.tokenGrantType}\n                    onChange={(e) => {\n                      setFormData({\n                        ...formData,\n                        tokenGrantType: e.target.value,\n                      });\n                      resetError();\n                    }}\n                    id=\"tokenGrantType\"\n                  >\n                    <option value=\"client_credentials\">\n                      Client access token\n                    </option>\n                    <option value=\"authorization_code\">\n                      User access token\n                    </option>\n                  </select>\n                  {formData.tokenGrantType === 'authorization_code' && (\n                    <div>\n                      <input\n                        className=\"u-full-width\"\n                        type=\"text\"\n                        placeholder=\"callback url*\"\n                        value={formData.callbackUrl}\n                        onChange={(e) => {\n                          setFormData({\n                            ...formData,\n                            callbackUrl: e.target.value,\n                          });\n                          resetError();\n                        }}\n                      />\n                      <InfoBox>\n                        <Text size=\"small\">\n                          *URL to redirect back to after logging in. Postman\n                          will not show the actual page, but it is still\n                          required for a successful login flow. Has to be a URL\n                          that is configured to be allowed for the given client\n                          id. See the{' '}\n                          <a\n                            href=\"https://docs.publiq.be/docs/authentication/ZG9jOjExODE5NTM5-user-access-token#client-configuration\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                          >\n                            user access token documentation\n                          </a>{' '}\n                          for more information.\n                        </Text>\n                      </InfoBox>\n                    </div>\n                  )}\n                </AdvancedOptions>\n              )}\n              <LinkButton onClick={toggleAdvancedOptions}>\n                {hasAdvancedSettings ? 'Hide' : 'Show'} advanced options\n              </LinkButton>\n              <DownloadButton onClick={handleSubmit} className=\"button-primary\">\n                Download\n              </DownloadButton>\n            </FormWrapper>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport { Form };\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n    body {\n      margin: 0;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n        sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n    }\n\n    code {\n      font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n        monospace;\n    }   \n\n    p,\n    input,\n    select,\n    button {\n      font-size: 1.5rem;\n    }\n\n    .swiper-container {\n      width: 800px;\n    }\n\n    .swiper-slide {\n      text-align: center;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      width: 700px;\n      padding-bottom: 10px;\n    }\n\n    .swiper-button-next,\n    .swiper-button-prev {\n      color: #00AAE5;\n    }\n\n    .swiper-pagination-bullet-active {\n      background: #00AAE5;\n    }\n\n    .swiper-pagination-bullets {\n      bottom: 0 !important;\n    }\n`;\n\nexport { GlobalStyle };\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 250px;\n  margin: 5rem 0 2.5rem 0;\n`;\n\nconst Logos = (props) => {\n  return (\n    <Container>\n      <img\n        src=\"https://postman.publiq.be/publiq-logo.png\"\n        alt=\"publiq logo\"\n        width=\"130\"\n      />\n      <img\n        src=\"https://postman.publiq.be/postman-logo.png\"\n        alt=\"postman logo\"\n        width=\"100\"\n      />\n    </Container>\n  );\n};\n\nexport { Logos };\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  max-width: 500px;\n  background-color: #efefef;\n  padding: 15px 15px 0 15px;\n  border-radius: 5px;\n  margin-bottom: 2.5rem;\n`;\n\nconst Paragraph = styled.p`\n  margin-bottom: 15px;\n`;\n\nconst Intro = (props) => {\n  return (\n    <Container>\n      <Paragraph>\n        Ready to start playing around with our APIs? Use the form below to\n        download a personalized{' '}\n        <a href=\"https://www.postman.com/\" target=\"_blank\" rel=\"noreferrer\">\n          Postman\n        </a>{' '}\n        collection and start making API requests to our test environment in a\n        matter of seconds!\n      </Paragraph>\n      <Paragraph>\n        We also provide extensive{' '}\n        <a href=\"https://docs.publiq.be\" target=\"_blank\" rel=\"noreferrer\">\n          API documentation\n        </a>{' '}\n        with how-to guides, a technical reference for each API endpoint, and\n        info about authentication and error handling.\n      </Paragraph>\n    </Container>\n  );\n};\n\nexport { Intro };\n","import { Form } from './Form';\nimport React, { useState } from 'react';\nimport { GlobalStyle } from './styles/GlobalStyle';\nimport styled from 'styled-components';\nimport { Logos } from './components/Logos';\nimport { Intro } from './components/Intro';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  flex-wrap: wrap;\n`;\n\nexport default function App() {\n  const [hideIntro, setHideIntro] = useState(false);\n\n  return (\n    <>\n      <GlobalStyle />\n      <Container className=\"App\">\n        <Logos />\n        {!hideIntro && <Intro />}\n        <Form onDownloadCompleted={setHideIntro} />\n      </Container>\n    </>\n  );\n}\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement,\n);\n"],"sourceRoot":""}