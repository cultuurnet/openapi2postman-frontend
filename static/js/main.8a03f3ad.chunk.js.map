{"version":3,"sources":["components/Alert.js","components/HowTo.js","components/Spinner.js","Form.js","styles/GlobalStyle.js","components/Logos.js","components/Intro.js","App.js","index.js"],"names":["Container","styled","div","Alert","props","text","SwiperCore","use","Navigation","Pagination","STEPS","id","Title","h1","HowTo","slidesPerView","setWrapperSize","navigation","pagination","clickable","map","step","index","src","alt","width","height","Spinner","defaultOptions","loop","autoplay","animationData","require","rendererSettings","preserveAspectRatio","options","FormWrapper","LinkButton","button","DownloadButton","Form","queryParams","URLSearchParams","window","location","search","useState","clientId","clientSecret","environment","apiType","get","otherUrl","formData","setFormData","DEFAULT_ERROR_TEXT","loading","setLoading","hasDownloadStarted","setHasDownloadStarted","hasError","setHasError","errorText","setErrorText","PUBLIQ_STOPLIGHT_SCHEME","UDB_ENTRY_SCHEME_URL","UITPAS_API_SCHEME_URL","handleSubmit","a","startsWith","scheme","auth","tokenGrantType","convert","postmanCollectionJson","apiName","info","name","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","click","onDownloadCompleted","console","log","resetError","onClick","className","placeholder","value","onChange","e","target","htmlFor","disabled","GlobalStyle","createGlobalStyle","Logos","Paragraph","p","Intro","rel","App","hideIntro","setHideIntro","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.8a03f3ad.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Container = styled.div`\n  padding: 15px;\n  background-color: #f2dede;\n  border: 1px solid #ebccd1;\n  color: #a94442;\n  margin-bottom: 2rem;\n  width: 500px;\n`;\n\nconst Alert = (props) => {\n  return <Container>{props.text}</Container>;\n};\n\nexport { Alert };\n","// Core modules imports are same as usual\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/swiper-bundle.min.css';\nimport 'swiper/swiper.min.css';\n\nimport SwiperCore, { Navigation, Pagination } from 'swiper';\nimport styled from 'styled-components';\nSwiperCore.use([Navigation, Pagination]);\n\nconst STEPS = [\n  {\n    id: 1,\n    text: 'Start by clicking the \"Import\" button in Postman.',\n  },\n  {\n    id: 2,\n    text: 'Drag and drop or select the JSON file you downloaded. Postman should show an overview of the included API. Click \"Import\" to continue.',\n  },\n  {\n    id: 3,\n    text: 'After the collection has been imported, click on the button with three dots next to its name. Next, click the \"Edit\" button in the drop-down menu that appears.',\n  },\n  {\n    id: 4,\n    text: 'Make sure the \"Auth\" tab of the collection is active. Scroll all the way to the bottom of the \"Auth\" tab, and click \"Get New Access Token\".',\n  },\n  {\n    id: 5,\n    text: 'Wait for the success modal to close or click the \"Proceed\" button.',\n  },\n  {\n    id: 6,\n    text: 'A modal to manage your tokens should appear, with a detail view of the new token. Click \"Use Token\". You are now ready to start making requests! If your token expires, follow the steps to get new access token again.',\n  },\n];\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin-bottom: 1.5rem;\n`;\n\nconst Title = styled.h1`\n  font-size: 3rem;\n  margin-bottom: 0;\n  text-align: center;\n`;\n\nconst HowTo = (props) => {\n  return (\n    <Container>\n      <Title>Installation guide</Title>\n      <Swiper\n        slidesPerView={1}\n        setWrapperSize={800}\n        navigation\n        pagination={{ clickable: true }}\n      >\n        {STEPS.map((step, index) => (\n          <SwiperSlide key={`step_${index}`}>\n            <img\n              src={`/postman-step-${step.id}.png`}\n              alt={`postman download step ${step.id}`}\n              width={700}\n              height={339}\n            />\n            <p>\n              {`${step.id}.`} {step.text}\n            </p>\n          </SwiperSlide>\n        ))}\n      </Swiper>\n    </Container>\n  );\n};\n\nexport { HowTo };\n","import Lottie from 'react-lottie';\n\nconst Spinner = (props) => {\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: require('../animations/spinner.json'),\n    rendererSettings: {\n      preserveAspectRatio: 'xMidYMid slice',\n    },\n  };\n\n  return <Lottie options={defaultOptions} height={50} width={50} />;\n};\n\nexport { Spinner };\n","import convert from '@publiqbe/openapi2postman';\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Alert } from './components/Alert';\nimport { HowTo } from './components/HowTo';\nimport { Spinner } from './components/Spinner';\n\nconst FormWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 300px;\n`;\n\nconst LinkButton = styled.button`\n  border: 0;\n  text-decoration: underline;\n  text-transform: none;\n  font-size: 1.5rem;\n  padding: 0;\n  height: 0;\n  letter-spacing: 0;\n  color: #00aae5;\n`;\n\nconst DownloadButton = styled.button`\n  height: 50px;\n`;\n\nconst Form = (props) => {\n  const queryParams = new URLSearchParams(window.location.search);\n\n  const [formData, setFormData] = useState({\n    clientId: '',\n    clientSecret: '',\n    environment: '',\n    apiType: queryParams.get('api') ?? '',\n    otherUrl: '',\n  });\n\n  const DEFAULT_ERROR_TEXT = 'Something went wrong, please try again later';\n\n  const [loading, setLoading] = useState(false);\n  const [hasDownloadStarted, setHasDownloadStarted] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorText, setErrorText] = useState(DEFAULT_ERROR_TEXT);\n\n  const PUBLIQ_STOPLIGHT_SCHEME =\n    'https://stoplight.io/api/v1/projects/publiq/';\n  const UDB_ENTRY_SCHEME_URL = `${PUBLIQ_STOPLIGHT_SCHEME}uitdatabank/nodes/reference/entry.json?deref=optimizedBundle`;\n  const UITPAS_API_SCHEME_URL = `${PUBLIQ_STOPLIGHT_SCHEME}uitpas/nodes/reference/UiTPAS.v2.json?deref=optimizedBundle`;\n\n  const handleSubmit = async () => {\n    if (\n      formData.apiType === 'other' &&\n      !formData.otherUrl.startsWith(PUBLIQ_STOPLIGHT_SCHEME)\n    ) {\n      setHasError(true);\n      setErrorText(`API URL should start with ${PUBLIQ_STOPLIGHT_SCHEME}`);\n      return;\n    }\n\n    if (formData.apiType === '') {\n      setHasError(true);\n      setErrorText(`Please select an API from the list`);\n      return;\n    }\n\n    let scheme;\n    switch (formData.apiType) {\n      case 'udb-entry':\n        scheme = UDB_ENTRY_SCHEME_URL;\n        break;\n      case 'uitpas-api':\n        scheme = UITPAS_API_SCHEME_URL;\n        break;\n      case 'other':\n        scheme = formData.otherUrl;\n        break;\n      default:\n        scheme = UDB_ENTRY_SCHEME_URL;\n    }\n    const environment = 'test';\n    const baseUrl = '';\n    const auth = {\n      tokenGrantType: 'client_credentials',\n      clientId: formData.clientId,\n      clientSecret: formData.clientSecret,\n    };\n    try {\n      setLoading(true);\n      const postmanCollectionJson = await convert(\n        scheme,\n        environment,\n        baseUrl,\n        auth,\n      );\n      const apiName = postmanCollectionJson.info.name || 'postman-collection';\n      const a = document.createElement('a');\n      const file = new Blob([JSON.stringify(postmanCollectionJson)], {\n        type: 'text/plain',\n      });\n      a.href = URL.createObjectURL(file);\n      a.download = apiName + '.json';\n      a.click();\n      setHasDownloadStarted(true);\n      props.onDownloadCompleted(true);\n    } catch (err) {\n      console.log(err);\n      setHasError(true);\n      setErrorText(DEFAULT_ERROR_TEXT);\n    }\n    setLoading(false);\n  };\n\n  const resetError = () => {\n    setHasError(false);\n    setErrorText('');\n  };\n\n  const restartFlow = () => {\n    setHasDownloadStarted(false);\n    props.onDownloadCompleted(false);\n  };\n\n  return (\n    <>\n      {hasError && <Alert text={errorText} />}\n      {loading ? (\n        <Spinner />\n      ) : (\n        <>\n          {hasDownloadStarted ? (\n            <>\n              <HowTo />\n              <LinkButton onClick={restartFlow}>\n                Download another collection\n              </LinkButton>\n            </>\n          ) : (\n            <FormWrapper key=\"form-wrapper\">\n              <div>\n                <input\n                  className=\"u-full-width\"\n                  type=\"text\"\n                  placeholder=\"client id (test environment)\"\n                  value={formData.clientId}\n                  onChange={(e) => {\n                    setFormData({ ...formData, clientId: e.target.value });\n                    resetError();\n                  }}\n                />\n              </div>\n              <div>\n                <input\n                  type=\"password\"\n                  className=\"u-full-width\"\n                  placeholder=\"client secret\"\n                  value={formData.clientSecret}\n                  onChange={(e) => {\n                    setFormData({ ...formData, clientSecret: e.target.value });\n                    resetError();\n                  }}\n                />\n              </div>\n              <div>\n                <label htmlFor=\"apiType\">API</label>\n                <select\n                  className=\"u-full-width\"\n                  value={formData.apiType}\n                  onChange={(e) => {\n                    setFormData({ ...formData, apiType: e.target.value });\n                    resetError();\n                  }}\n                  id=\"apiType\"\n                >\n                  <option value=\"\" disabled>\n                    Select API\n                  </option>\n                  <option value=\"udb-entry\">UiTdatabank Entry API</option>\n                  <option value=\"uitpas-api\">UiTPAS API</option>\n                  <option value=\"other\">Other...</option>\n                </select>\n              </div>\n              {formData.apiType === 'other' && (\n                <div>\n                  <input\n                    className=\"u-full-width\"\n                    type=\"text\"\n                    placeholder=\"url\"\n                    value={formData.otherUrl}\n                    onChange={(e) => {\n                      setFormData({ ...formData, otherUrl: e.target.value });\n                      resetError();\n                    }}\n                  />\n                </div>\n              )}\n              <DownloadButton onClick={handleSubmit} className=\"button-primary\">\n                Download\n              </DownloadButton>\n            </FormWrapper>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport { Form };\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n    body {\n      margin: 0;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n        sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n    }\n\n    code {\n      font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n        monospace;\n    }   \n\n    p,\n    input,\n    select,\n    button {\n      font-size: 1.5rem;\n    }\n\n    .swiper-container {\n      width: 800px;\n    }\n\n    .swiper-slide {\n      text-align: center;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      width: 700px;\n      padding-bottom: 10px;\n    }\n\n    .swiper-button-next,\n    .swiper-button-prev {\n      color: #00AAE5;\n    }\n\n    .swiper-pagination-bullet-active {\n      background: #00AAE5;\n    }\n\n    .swiper-pagination-bullets {\n      bottom: 0 !important;\n    }\n`;\n\nexport { GlobalStyle };\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 250px;\n  margin: 5rem 0 2.5rem 0;\n`;\n\nconst Logos = (props) => {\n  return (\n    <Container>\n      <img\n        src=\"https://postman.publiq.be/publiq-logo.png\"\n        alt=\"publiq logo\"\n        width=\"130\"\n      />\n      <img\n        src=\"https://postman.publiq.be/postman-logo.png\"\n        alt=\"postman logo\"\n        width=\"100\"\n      />\n    </Container>\n  );\n};\n\nexport { Logos };\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  max-width: 500px;\n  background-color: #efefef;\n  padding: 15px 15px 0 15px;\n  border-radius: 5px;\n  margin-bottom: 2.5rem;\n`;\n\nconst Paragraph = styled.p`\n  margin-bottom: 15px;\n`;\n\nconst Intro = (props) => {\n  return (\n    <Container>\n      <Paragraph>\n        Ready to start playing around with our APIs? Use the form below to\n        download a personalized{' '}\n        <a href=\"https://www.postman.com/\" target=\"_blank\" rel=\"noreferrer\">\n          Postman\n        </a>{' '}\n        collection and start making API requests to our test environment in a\n        matter of seconds!\n      </Paragraph>\n      <Paragraph>\n        We also provide extensive{' '}\n        <a href=\"https://docs.publiq.be\" target=\"_blank\" rel=\"noreferrer\">\n          API documentation\n        </a>{' '}\n        with how-to guides, a technical reference for each API endpoint, and\n        info about authentication and error handling.\n      </Paragraph>\n    </Container>\n  );\n};\n\nexport { Intro };\n","import { Form } from './Form';\nimport React, { useState } from 'react';\nimport { GlobalStyle } from './styles/GlobalStyle';\nimport styled from 'styled-components';\nimport { Logos } from './components/Logos';\nimport { Intro } from './components/Intro';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  flex-wrap: wrap;\n`;\n\nexport default function App() {\n  const [hideIntro, setHideIntro] = useState(false);\n\n  return (\n    <>\n      <GlobalStyle />\n      <Container className=\"App\">\n        <Logos />\n        {!hideIntro && <Intro />}\n        <Form onDownloadCompleted={setHideIntro} />\n      </Container>\n    </>\n  );\n}\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement,\n);\n"],"sourceRoot":""}